" plugins
call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-fugitive'                             " Git wrapper
Plug 'kien/ctrlp.vim'
Plug 'mileszs/ack.vim'                                " search tool
Plug 'scrooloose/nerdtree'
Plug 'itchyny/lightline.vim'                          " status line
Plug 'tpope/vim-surround'                             " quotes, brackets etc.
Plug 'shougo/neocomplete.vim'                         " keyword completion
Plug 'airblade/vim-gitgutter'
Plug 'scrooloose/nerdcommenter'                       " comments
Plug 'majutsushi/tagbar'                              " structure overview
Plug 'terryma/vim-multiple-cursors'                   " faster selecting
Plug 'mxw/vim-jsx'
Plug 'tpope/vim-eunuch'                               " shell commands
call plug#end()

" general
set encoding=utf-8
set guifont=Monaco:h12                                " font & size
colorscheme monokai                                   " theme
set number                                            " line number
set cursorline                                        " current line
set autoread
set colorcolumn=100                                   " vertical line

" whitespace, indentation
set backspace=indent,eol,start
set autoindent
set tabstop=2 softtabstop=2 shiftwidth=2 expandtab smarttab shiftround
set ambiwidth=single
set list                                              " make whitespaces visible
set listchars=tab:│\ ,trail:•,extends:❯,precedes:❮
set linebreak
let &showbreak='↪ '
autocmd BufWritePre * :%s/\s\+$//e                    " remove trailing spaces on save

" mappings
nmap <C-Tab> :tabnext<CR>
nmap <C-S-Tab> :tabprevious<CR>
imap jk <Esc>

" nerdtree
map <C-n> :NERDTreeToggle<CR>
set guioptions-=L                                     " disable scroll bar
let g:NERDTreeWinSize = 40                            " width

" Ack
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

" lightline
let g:lightline = {
  \ 'colorscheme': 'wombat',
  \ 'active': {
  \   'left': [ [ 'mode', 'paste' ],
  \             [ 'fugitive', 'filename', 'modified' ] ]
  \ },
  \ 'component_function': {
  \   'modified': 'LightLineModified',
  \   'fugitive': 'LightLineFugitive',
  \   'filename': 'LightLineFilename'
  \ }
  \ }

function! LightLineModified()
  if &filetype == "help"
    return ""
  elseif &modified
    return "+"
  elseif &modifiable
    return ""
  else
    return ""
  endif
endfunction

function! LightLineFugitive()
  return exists('*fugitive#head') ? fugitive#head() : ''
endfunction

function! LightLineFilename()
  return expand('%')
endfunction

" neocomplete
let g:neocomplete#enable_at_startup = 1               " open when starts up

" nerdcommenter
let NERDSpaceDelims = 1                               " add 1 space after comment symbol

" tagbar
nmap <F8> :TagbarToggle<CR>

" multiple cursors
let g:multi_cursor_next_key = '<C-d>'

" jsx
let g:jsx_ext_required = 0

" syntax highlighting
if !exists("g:syntax_on")
  syntax enable
endif
